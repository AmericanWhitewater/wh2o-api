//
// FeatureAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

internal class FeatureAPI {

    /**
     Returns a list of features (rapids, waterfalls, etc.).
     
     - parameter offset: (query) Number of items to skip before starting to return items (optional)
     - parameter limit: (query) Maximum number of items to return (optional)
     - returns: [Feature]
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    internal class func featureGet(offset: Int? = nil, limit: Int? = nil) async throws -> [Feature] {
        return try await featureGetWithRequestBuilder(offset: offset, limit: limit).execute().body
    }

    /**
     Returns a list of features (rapids, waterfalls, etc.).
     - GET /feature
     - API Key:
       - type: apiKey X-WH2O-API-KEY (HEADER)
       - name: ApiKeyAuth
     - parameter offset: (query) Number of items to skip before starting to return items (optional)
     - parameter limit: (query) Maximum number of items to return (optional)
     - returns: RequestBuilder<[Feature]> 
     */
    internal class func featureGetWithRequestBuilder(offset: Int? = nil, limit: Int? = nil) -> RequestBuilder<[Feature]> {
        let localVariablePath = "/feature"
        let localVariableURLString = AmericanWhitewaterAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "offset": (wrappedValue: offset?.encodeToJSON(), isExplode: true),
            "limit": (wrappedValue: limit?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[Feature]>.Type = AmericanWhitewaterAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Deletes a feature by ID.
     
     - parameter id: (path)  
     - returns: Feature
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    internal class func featureIdDelete(id: String) async throws -> Feature {
        return try await featureIdDeleteWithRequestBuilder(id: id).execute().body
    }

    /**
     Deletes a feature by ID.
     - DELETE /feature/{id}
     - API Key:
       - type: apiKey X-WH2O-API-KEY (HEADER)
       - name: ApiKeyAuth
     - parameter id: (path)  
     - returns: RequestBuilder<Feature> 
     */
    internal class func featureIdDeleteWithRequestBuilder(id: String) -> RequestBuilder<Feature> {
        var localVariablePath = "/feature/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = AmericanWhitewaterAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Feature>.Type = AmericanWhitewaterAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Returns a feature by ID.
     
     - parameter id: (path)  
     - returns: Feature
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    internal class func featureIdGet(id: String) async throws -> Feature {
        return try await featureIdGetWithRequestBuilder(id: id).execute().body
    }

    /**
     Returns a feature by ID.
     - GET /feature/{id}
     - API Key:
       - type: apiKey X-WH2O-API-KEY (HEADER)
       - name: ApiKeyAuth
     - parameter id: (path)  
     - returns: RequestBuilder<Feature> 
     */
    internal class func featureIdGetWithRequestBuilder(id: String) -> RequestBuilder<Feature> {
        var localVariablePath = "/feature/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = AmericanWhitewaterAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Feature>.Type = AmericanWhitewaterAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Updates a feature by ID.
     
     - parameter id: (path)  
     - parameter feature: (body)  
     - returns: Feature
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    internal class func featureIdPut(id: String, feature: Feature) async throws -> Feature {
        return try await featureIdPutWithRequestBuilder(id: id, feature: feature).execute().body
    }

    /**
     Updates a feature by ID.
     - PUT /feature/{id}
     - API Key:
       - type: apiKey X-WH2O-API-KEY (HEADER)
       - name: ApiKeyAuth
     - parameter id: (path)  
     - parameter feature: (body)  
     - returns: RequestBuilder<Feature> 
     */
    internal class func featureIdPutWithRequestBuilder(id: String, feature: Feature) -> RequestBuilder<Feature> {
        var localVariablePath = "/feature/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = AmericanWhitewaterAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: feature)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Feature>.Type = AmericanWhitewaterAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Creates a new feature.
     
     - parameter feature: (body)  
     - returns: Feature
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    internal class func featurePost(feature: Feature) async throws -> Feature {
        return try await featurePostWithRequestBuilder(feature: feature).execute().body
    }

    /**
     Creates a new feature.
     - POST /feature
     - API Key:
       - type: apiKey X-WH2O-API-KEY (HEADER)
       - name: ApiKeyAuth
     - parameter feature: (body)  
     - returns: RequestBuilder<Feature> 
     */
    internal class func featurePostWithRequestBuilder(feature: Feature) -> RequestBuilder<Feature> {
        let localVariablePath = "/feature"
        let localVariableURLString = AmericanWhitewaterAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: feature)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Feature>.Type = AmericanWhitewaterAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }
}
