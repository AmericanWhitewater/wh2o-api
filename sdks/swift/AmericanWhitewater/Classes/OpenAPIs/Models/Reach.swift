//
// Reach.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

internal struct Reach: Codable, JSONEncodable, Hashable {

    /** The auto-generated id of the reach */
    internal var id: Int?
    /** The name of the reach */
    internal var river: String
    /** The section of the reach */
    internal var section: String
    internal var alternateName: String?
    internal var abstract: String?
    internal var averageGradient: Double?
    internal var maximumGradient: Double?
    internal var minimumGradient: Double?
    internal var county: String?
    internal var description: String?
    internal var grade: String?
    internal var state: String?
    internal var zipcode: String?
    internal var length: Double?
    internal var events: [Event]?
    internal var features: [Feature]?
    internal var gages: [Gage]?
    internal var posts: [Post]?
    internal var permit: Permit?

    internal init(id: Int? = nil, river: String, section: String, alternateName: String? = nil, abstract: String? = nil, averageGradient: Double? = nil, maximumGradient: Double? = nil, minimumGradient: Double? = nil, county: String? = nil, description: String? = nil, grade: String? = nil, state: String? = nil, zipcode: String? = nil, length: Double? = nil, events: [Event]? = nil, features: [Feature]? = nil, gages: [Gage]? = nil, posts: [Post]? = nil, permit: Permit? = nil) {
        self.id = id
        self.river = river
        self.section = section
        self.alternateName = alternateName
        self.abstract = abstract
        self.averageGradient = averageGradient
        self.maximumGradient = maximumGradient
        self.minimumGradient = minimumGradient
        self.county = county
        self.description = description
        self.grade = grade
        self.state = state
        self.zipcode = zipcode
        self.length = length
        self.events = events
        self.features = features
        self.gages = gages
        self.posts = posts
        self.permit = permit
    }

    internal enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case river
        case section
        case alternateName = "alternate_name"
        case abstract
        case averageGradient = "average_gradient"
        case maximumGradient = "maximum_gradient"
        case minimumGradient = "minimum_gradient"
        case county
        case description
        case grade
        case state
        case zipcode
        case length
        case events
        case features
        case gages
        case posts
        case permit
    }

    // Encodable protocol methods

    internal func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encode(river, forKey: .river)
        try container.encode(section, forKey: .section)
        try container.encodeIfPresent(alternateName, forKey: .alternateName)
        try container.encodeIfPresent(abstract, forKey: .abstract)
        try container.encodeIfPresent(averageGradient, forKey: .averageGradient)
        try container.encodeIfPresent(maximumGradient, forKey: .maximumGradient)
        try container.encodeIfPresent(minimumGradient, forKey: .minimumGradient)
        try container.encodeIfPresent(county, forKey: .county)
        try container.encodeIfPresent(description, forKey: .description)
        try container.encodeIfPresent(grade, forKey: .grade)
        try container.encodeIfPresent(state, forKey: .state)
        try container.encodeIfPresent(zipcode, forKey: .zipcode)
        try container.encodeIfPresent(length, forKey: .length)
        try container.encodeIfPresent(events, forKey: .events)
        try container.encodeIfPresent(features, forKey: .features)
        try container.encodeIfPresent(gages, forKey: .gages)
        try container.encodeIfPresent(posts, forKey: .posts)
        try container.encodeIfPresent(permit, forKey: .permit)
    }
}

