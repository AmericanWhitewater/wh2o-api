//
// GageAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

internal class GageAPI {

    /**
     Returns a list of gages.
     
     - parameter offset: (query) Number of items to skip before starting to return items (optional)
     - parameter limit: (query) Maximum number of items to return (optional)
     - returns: [Gage]
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    internal class func gageGet(offset: Int? = nil, limit: Int? = nil) async throws -> [Gage] {
        return try await gageGetWithRequestBuilder(offset: offset, limit: limit).execute().body
    }

    /**
     Returns a list of gages.
     - GET /gage
     - API Key:
       - type: apiKey X-WH2O-API-KEY (HEADER)
       - name: ApiKeyAuth
     - parameter offset: (query) Number of items to skip before starting to return items (optional)
     - parameter limit: (query) Maximum number of items to return (optional)
     - returns: RequestBuilder<[Gage]> 
     */
    internal class func gageGetWithRequestBuilder(offset: Int? = nil, limit: Int? = nil) -> RequestBuilder<[Gage]> {
        let localVariablePath = "/gage"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "offset": (wrappedValue: offset?.encodeToJSON(), isExplode: true),
            "limit": (wrappedValue: limit?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[Gage]>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Creates a new gage.
     
     - parameter gage: (body)  
     - returns: Gage
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    internal class func gagePost(gage: Gage) async throws -> Gage {
        return try await gagePostWithRequestBuilder(gage: gage).execute().body
    }

    /**
     Creates a new gage.
     - POST /gage
     - API Key:
       - type: apiKey X-WH2O-API-KEY (HEADER)
       - name: ApiKeyAuth
     - parameter gage: (body)  
     - returns: RequestBuilder<Gage> 
     */
    internal class func gagePostWithRequestBuilder(gage: Gage) -> RequestBuilder<Gage> {
        let localVariablePath = "/gage"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: gage)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Gage>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }
}
