//
// ReachAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

internal class ReachAPI {

    /**
     Returns a list of reaches (rivers, creeks, streams).
     
     - parameter offset: (query) Number of items to skip before starting to return items (optional)
     - parameter limit: (query) Maximum number of items to return (optional)
     - returns: [Reach]
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    internal class func reachGet(offset: Int? = nil, limit: Int? = nil) async throws -> [Reach] {
        return try await reachGetWithRequestBuilder(offset: offset, limit: limit).execute().body
    }

    /**
     Returns a list of reaches (rivers, creeks, streams).
     - GET /reach
     - API Key:
       - type: apiKey X-WH2O-API-KEY (HEADER)
       - name: ApiKeyAuth
     - parameter offset: (query) Number of items to skip before starting to return items (optional)
     - parameter limit: (query) Maximum number of items to return (optional)
     - returns: RequestBuilder<[Reach]> 
     */
    internal class func reachGetWithRequestBuilder(offset: Int? = nil, limit: Int? = nil) -> RequestBuilder<[Reach]> {
        let localVariablePath = "/reach"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "offset": (wrappedValue: offset?.encodeToJSON(), isExplode: true),
            "limit": (wrappedValue: limit?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[Reach]>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Gets all the accidents for a reach by ID.
     
     - parameter id: (path)  
     - returns: Accident
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    internal class func reachIdAccidentGet(id: String) async throws -> Accident {
        return try await reachIdAccidentGetWithRequestBuilder(id: id).execute().body
    }

    /**
     Gets all the accidents for a reach by ID.
     - GET /reach/{id}/accident
     - API Key:
       - type: apiKey X-WH2O-API-KEY (HEADER)
       - name: ApiKeyAuth
     - parameter id: (path)  
     - returns: RequestBuilder<Accident> 
     */
    internal class func reachIdAccidentGetWithRequestBuilder(id: String) -> RequestBuilder<Accident> {
        var localVariablePath = "/reach/{id}/accident"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Accident>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Gets all the articles for a reach by ID.
     
     - parameter id: (path)  
     - returns: Article
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    internal class func reachIdArticleGet(id: String) async throws -> Article {
        return try await reachIdArticleGetWithRequestBuilder(id: id).execute().body
    }

    /**
     Gets all the articles for a reach by ID.
     - GET /reach/{id}/article
     - API Key:
       - type: apiKey X-WH2O-API-KEY (HEADER)
       - name: ApiKeyAuth
     - parameter id: (path)  
     - returns: RequestBuilder<Article> 
     */
    internal class func reachIdArticleGetWithRequestBuilder(id: String) -> RequestBuilder<Article> {
        var localVariablePath = "/reach/{id}/article"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Article>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Deletes a reach by ID.
     
     - parameter id: (path)  
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    internal class func reachIdDelete(id: String) async throws {
        return try await reachIdDeleteWithRequestBuilder(id: id).execute().body
    }

    /**
     Deletes a reach by ID.
     - DELETE /reach/{id}
     - API Key:
       - type: apiKey X-WH2O-API-KEY (HEADER)
       - name: ApiKeyAuth
     - parameter id: (path)  
     - returns: RequestBuilder<Void> 
     */
    internal class func reachIdDeleteWithRequestBuilder(id: String) -> RequestBuilder<Void> {
        var localVariablePath = "/reach/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Gets all the events for a reach by ID.
     
     - parameter id: (path)  
     - returns: Event
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    internal class func reachIdEventGet(id: String) async throws -> Event {
        return try await reachIdEventGetWithRequestBuilder(id: id).execute().body
    }

    /**
     Gets all the events for a reach by ID.
     - GET /reach/{id}/event
     - API Key:
       - type: apiKey X-WH2O-API-KEY (HEADER)
       - name: ApiKeyAuth
     - parameter id: (path)  
     - returns: RequestBuilder<Event> 
     */
    internal class func reachIdEventGetWithRequestBuilder(id: String) -> RequestBuilder<Event> {
        var localVariablePath = "/reach/{id}/event"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Event>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Gets all the features for a reach by ID.
     
     - parameter id: (path)  
     - returns: Feature
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    internal class func reachIdFeatureGet(id: String) async throws -> Feature {
        return try await reachIdFeatureGetWithRequestBuilder(id: id).execute().body
    }

    /**
     Gets all the features for a reach by ID.
     - GET /reach/{id}/feature
     - API Key:
       - type: apiKey X-WH2O-API-KEY (HEADER)
       - name: ApiKeyAuth
     - parameter id: (path)  
     - returns: RequestBuilder<Feature> 
     */
    internal class func reachIdFeatureGetWithRequestBuilder(id: String) -> RequestBuilder<Feature> {
        var localVariablePath = "/reach/{id}/feature"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Feature>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Gets all the gages for a reach by ID.
     
     - parameter id: (path)  
     - returns: Gage
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    internal class func reachIdGageGet(id: String) async throws -> Gage {
        return try await reachIdGageGetWithRequestBuilder(id: id).execute().body
    }

    /**
     Gets all the gages for a reach by ID.
     - GET /reach/{id}/gage
     - API Key:
       - type: apiKey X-WH2O-API-KEY (HEADER)
       - name: ApiKeyAuth
     - parameter id: (path)  
     - returns: RequestBuilder<Gage> 
     */
    internal class func reachIdGageGetWithRequestBuilder(id: String) -> RequestBuilder<Gage> {
        var localVariablePath = "/reach/{id}/gage"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Gage>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Gets a reach by ID.
     
     - parameter id: (path)  
     - returns: Reach
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    internal class func reachIdGet(id: String) async throws -> Reach {
        return try await reachIdGetWithRequestBuilder(id: id).execute().body
    }

    /**
     Gets a reach by ID.
     - GET /reach/{id}
     - API Key:
       - type: apiKey X-WH2O-API-KEY (HEADER)
       - name: ApiKeyAuth
     - parameter id: (path)  
     - returns: RequestBuilder<Reach> 
     */
    internal class func reachIdGetWithRequestBuilder(id: String) -> RequestBuilder<Reach> {
        var localVariablePath = "/reach/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Reach>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Gets all the posts for a reach by ID.
     
     - parameter id: (path)  
     - returns: Post
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    internal class func reachIdPostGet(id: String) async throws -> Post {
        return try await reachIdPostGetWithRequestBuilder(id: id).execute().body
    }

    /**
     Gets all the posts for a reach by ID.
     - GET /reach/{id}/post
     - API Key:
       - type: apiKey X-WH2O-API-KEY (HEADER)
       - name: ApiKeyAuth
     - parameter id: (path)  
     - returns: RequestBuilder<Post> 
     */
    internal class func reachIdPostGetWithRequestBuilder(id: String) -> RequestBuilder<Post> {
        var localVariablePath = "/reach/{id}/post"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Post>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Updates a reach by ID.
     
     - parameter id: (path)  
     - parameter reach: (body)  
     - returns: Reach
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    internal class func reachIdPut(id: String, reach: Reach) async throws -> Reach {
        return try await reachIdPutWithRequestBuilder(id: id, reach: reach).execute().body
    }

    /**
     Updates a reach by ID.
     - PUT /reach/{id}
     - API Key:
       - type: apiKey X-WH2O-API-KEY (HEADER)
       - name: ApiKeyAuth
     - parameter id: (path)  
     - parameter reach: (body)  
     - returns: RequestBuilder<Reach> 
     */
    internal class func reachIdPutWithRequestBuilder(id: String, reach: Reach) -> RequestBuilder<Reach> {
        var localVariablePath = "/reach/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: reach)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Reach>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Creates a new reach.
     
     - parameter reach: (body)  
     - returns: Reach
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    internal class func reachPost(reach: Reach) async throws -> Reach {
        return try await reachPostWithRequestBuilder(reach: reach).execute().body
    }

    /**
     Creates a new reach.
     - POST /reach
     - API Key:
       - type: apiKey X-WH2O-API-KEY (HEADER)
       - name: ApiKeyAuth
     - parameter reach: (body)  
     - returns: RequestBuilder<Reach> 
     */
    internal class func reachPostWithRequestBuilder(reach: Reach) -> RequestBuilder<Reach> {
        let localVariablePath = "/reach"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: reach)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Reach>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Gets all the reaches for U.S. State.
     
     - parameter state: (path)  
     - returns: Reach
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    internal class func reachStateStateGet(state: String) async throws -> Reach {
        return try await reachStateStateGetWithRequestBuilder(state: state).execute().body
    }

    /**
     Gets all the reaches for U.S. State.
     - GET /reach/state/{state}
     - API Key:
       - type: apiKey X-WH2O-API-KEY (HEADER)
       - name: ApiKeyAuth
     - parameter state: (path)  
     - returns: RequestBuilder<Reach> 
     */
    internal class func reachStateStateGetWithRequestBuilder(state: String) -> RequestBuilder<Reach> {
        var localVariablePath = "/reach/state/{state}"
        let statePreEscape = "\(APIHelper.mapValueToPathItem(state))"
        let statePostEscape = statePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{state}", with: statePostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Reach>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }
}
