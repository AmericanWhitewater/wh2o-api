//
// Post.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

internal struct Post: Codable, JSONEncodable, Hashable {

    /** The auto-generated id of the post */
    internal var id: Int?
    /** The title the post */
    internal var title: String?
    /** The content of the post */
    internal var content: String?
    /** Whether the post is published or not */
    internal var published: Bool?
    internal var createdAt: Date?
    internal var updatedAt: Date?
    internal var author: User?
    internal var reach: Reach?

    internal init(id: Int? = nil, title: String? = nil, content: String? = nil, published: Bool? = nil, createdAt: Date? = nil, updatedAt: Date? = nil, author: User? = nil, reach: Reach? = nil) {
        self.id = id
        self.title = title
        self.content = content
        self.published = published
        self.createdAt = createdAt
        self.updatedAt = updatedAt
        self.author = author
        self.reach = reach
    }

    internal enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case title
        case content
        case published
        case createdAt
        case updatedAt
        case author
        case reach
    }

    // Encodable protocol methods

    internal func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(title, forKey: .title)
        try container.encodeIfPresent(content, forKey: .content)
        try container.encodeIfPresent(published, forKey: .published)
        try container.encodeIfPresent(createdAt, forKey: .createdAt)
        try container.encodeIfPresent(updatedAt, forKey: .updatedAt)
        try container.encodeIfPresent(author, forKey: .author)
        try container.encodeIfPresent(reach, forKey: .reach)
    }
}

