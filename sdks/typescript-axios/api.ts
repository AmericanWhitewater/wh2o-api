/* tslint:disable */
/* eslint-disable */
/**
 * wh2o-api
 * The API for American Whitewater.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Configuration } from "./configuration"
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from "axios"
import globalAxios from "axios"
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from "./common"
import type { RequestArgs } from "./base"
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError } from "./base"

/**
 *
 * @export
 * @interface Accident
 */
export interface Accident {
  /**
   * The auto-generated id of the accident
   * @type {number}
   * @memberof Accident
   */
  id?: number
  /**
   * The title of the accident
   * @type {string}
   * @memberof Accident
   */
  title?: string
}
/**
 *
 * @export
 * @interface Article
 */
export interface Article {
  /**
   * The auto-generated id of the article
   * @type {number}
   * @memberof Article
   */
  id?: number
  /**
   * The name of the article
   * @type {string}
   * @memberof Article
   */
  title?: string
  /**
   *
   * @type {User}
   * @memberof Article
   */
  author?: User
}
/**
 *
 * @export
 * @interface Event
 */
export interface Event {
  /**
   * The auto-generated id of the event
   * @type {number}
   * @memberof Event
   */
  id?: number
  /**
   * The name of the event
   * @type {string}
   * @memberof Event
   */
  name?: string
  /**
   *
   * @type {Reach}
   * @memberof Event
   */
  reach?: Reach
}
/**
 *
 * @export
 * @interface Feature
 */
export interface Feature {
  /**
   * The auto-generated id of the feature
   * @type {number}
   * @memberof Feature
   */
  id?: number
  /**
   * The name of the feature
   * @type {string}
   * @memberof Feature
   */
  name?: string
  /**
   *
   * @type {string}
   * @memberof Feature
   */
  description?: string
  /**
   *
   * @type {number}
   * @memberof Feature
   */
  distance?: number
  /**
   *
   * @type {string}
   * @memberof Feature
   */
  character?: FeatureCharacterEnum
  /**
   *
   * @type {number}
   * @memberof Feature
   */
  reachId?: number
}

export const FeatureCharacterEnum = {
  Access: "access",
  Hazard: "hazard",
  Other: "other",
  SurfSpot: "surf_spot",
  Portage: "portage",
  Putin: "putin",
  Rapid: "rapid",
  Takeout: "takeout",
  Waterfall: "waterfall",
} as const

export type FeatureCharacterEnum =
  (typeof FeatureCharacterEnum)[keyof typeof FeatureCharacterEnum]

/**
 *
 * @export
 * @interface Gage
 */
export interface Gage {
  /**
   * The auto-generated id of the gage
   * @type {number}
   * @memberof Gage
   */
  id?: number
  /**
   * The name of the gage
   * @type {string}
   * @memberof Gage
   */
  name?: string
}
/**
 *
 * @export
 * @interface Permit
 */
export interface Permit {
  /**
   *
   * @type {number}
   * @memberof Permit
   */
  id?: number
  /**
   *
   * @type {string}
   * @memberof Permit
   */
  name?: string
}
/**
 *
 * @export
 * @interface Post
 */
export interface Post {
  /**
   * The auto-generated id of the post
   * @type {number}
   * @memberof Post
   */
  id?: number
  /**
   * The title the post
   * @type {string}
   * @memberof Post
   */
  title?: string
  /**
   * The content of the post
   * @type {string}
   * @memberof Post
   */
  content?: string
  /**
   * Whether the post is published or not
   * @type {boolean}
   * @memberof Post
   */
  published?: boolean
  /**
   *
   * @type {string}
   * @memberof Post
   */
  createdAt?: string
  /**
   *
   * @type {string}
   * @memberof Post
   */
  updatedAt?: string
  /**
   *
   * @type {User}
   * @memberof Post
   */
  author?: User
  /**
   *
   * @type {Reach}
   * @memberof Post
   */
  reach?: Reach
}
/**
 *
 * @export
 * @interface Reach
 */
export interface Reach {
  /**
   * The auto-generated id of the reach
   * @type {number}
   * @memberof Reach
   */
  id?: number
  /**
   * The name of the reach
   * @type {string}
   * @memberof Reach
   */
  river: string
  /**
   * The section of the reach
   * @type {string}
   * @memberof Reach
   */
  section: string
  /**
   *
   * @type {string}
   * @memberof Reach
   */
  alternate_name?: string
  /**
   *
   * @type {string}
   * @memberof Reach
   */
  abstract?: string
  /**
   *
   * @type {number}
   * @memberof Reach
   */
  average_gradient?: number
  /**
   *
   * @type {number}
   * @memberof Reach
   */
  maximum_gradient?: number
  /**
   *
   * @type {number}
   * @memberof Reach
   */
  minimum_gradient?: number
  /**
   *
   * @type {string}
   * @memberof Reach
   */
  county?: string
  /**
   *
   * @type {string}
   * @memberof Reach
   */
  description?: string
  /**
   *
   * @type {string}
   * @memberof Reach
   */
  grade?: string
  /**
   *
   * @type {string}
   * @memberof Reach
   */
  state?: string
  /**
   *
   * @type {string}
   * @memberof Reach
   */
  zipcode?: string
  /**
   *
   * @type {number}
   * @memberof Reach
   */
  length?: number
  /**
   *
   * @type {Array<Event>}
   * @memberof Reach
   */
  events?: Array<Event>
  /**
   *
   * @type {Array<Feature>}
   * @memberof Reach
   */
  features?: Array<Feature>
  /**
   *
   * @type {Array<Gage>}
   * @memberof Reach
   */
  gages?: Array<Gage>
  /**
   *
   * @type {Array<Post>}
   * @memberof Reach
   */
  posts?: Array<Post>
  /**
   *
   * @type {Permit}
   * @memberof Reach
   */
  permit?: Permit
}
/**
 *
 * @export
 * @interface Revision
 */
export interface Revision {
  /**
   * The auto-generated id of the revision
   * @type {number}
   * @memberof Revision
   */
  id?: number
  /**
   * The name of the revision
   * @type {string}
   * @memberof Revision
   */
  name?: string
}
/**
 *
 * @export
 * @interface User
 */
export interface User {
  /**
   *
   * @type {number}
   * @memberof User
   */
  id?: number
  /**
   *
   * @type {string}
   * @memberof User
   */
  email?: string
  /**
   *
   * @type {string}
   * @memberof User
   */
  name?: string
  /**
   *
   * @type {Array<Post>}
   * @memberof User
   */
  posts?: Array<Post>
  /**
   *
   * @type {Array<Article>}
   * @memberof User
   */
  articles?: Array<Article>
}

/**
 * FeatureApi - axios parameter creator
 * @export
 */
export const FeatureApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @summary Returns a list of features (rapids, waterfalls, etc.).
     * @param {number} [offset] Number of items to skip before starting to return items
     * @param {number} [limit] Maximum number of items to return
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    featureGet: async (
      offset?: number,
      limit?: number,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/feature`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication ApiKeyAuth required
      await setApiKeyToObject(
        localVarHeaderParameter,
        "X-WH2O-API-KEY",
        configuration
      )

      if (offset !== undefined) {
        localVarQueryParameter["offset"] = offset
      }

      if (limit !== undefined) {
        localVarQueryParameter["limit"] = limit
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Deletes a feature by ID.
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    featureIdDelete: async (
      id: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("featureIdDelete", "id", id)
      const localVarPath = `/feature/{id}`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id))
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication ApiKeyAuth required
      await setApiKeyToObject(
        localVarHeaderParameter,
        "X-WH2O-API-KEY",
        configuration
      )

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Returns a feature by ID.
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    featureIdGet: async (
      id: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("featureIdGet", "id", id)
      const localVarPath = `/feature/{id}`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id))
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication ApiKeyAuth required
      await setApiKeyToObject(
        localVarHeaderParameter,
        "X-WH2O-API-KEY",
        configuration
      )

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Updates a feature by ID.
     * @param {string} id
     * @param {Feature} feature
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    featureIdPut: async (
      id: string,
      feature: Feature,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("featureIdPut", "id", id)
      // verify required parameter 'feature' is not null or undefined
      assertParamExists("featureIdPut", "feature", feature)
      const localVarPath = `/feature/{id}`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id))
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication ApiKeyAuth required
      await setApiKeyToObject(
        localVarHeaderParameter,
        "X-WH2O-API-KEY",
        configuration
      )

      localVarHeaderParameter["Content-Type"] = "application/json"

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        feature,
        localVarRequestOptions,
        configuration
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Creates a new feature.
     * @param {Feature} feature
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    featurePost: async (
      feature: Feature,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'feature' is not null or undefined
      assertParamExists("featurePost", "feature", feature)
      const localVarPath = `/feature`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication ApiKeyAuth required
      await setApiKeyToObject(
        localVarHeaderParameter,
        "X-WH2O-API-KEY",
        configuration
      )

      localVarHeaderParameter["Content-Type"] = "application/json"

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        feature,
        localVarRequestOptions,
        configuration
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * FeatureApi - functional programming interface
 * @export
 */
export const FeatureApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = FeatureApiAxiosParamCreator(configuration)
  return {
    /**
     *
     * @summary Returns a list of features (rapids, waterfalls, etc.).
     * @param {number} [offset] Number of items to skip before starting to return items
     * @param {number} [limit] Maximum number of items to return
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async featureGet(
      offset?: number,
      limit?: number,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Feature>>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.featureGet(
        offset,
        limit,
        options
      )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      )
    },
    /**
     *
     * @summary Deletes a feature by ID.
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async featureIdDelete(
      id: string,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Feature>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.featureIdDelete(
        id,
        options
      )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      )
    },
    /**
     *
     * @summary Returns a feature by ID.
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async featureIdGet(
      id: string,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Feature>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.featureIdGet(
        id,
        options
      )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      )
    },
    /**
     *
     * @summary Updates a feature by ID.
     * @param {string} id
     * @param {Feature} feature
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async featureIdPut(
      id: string,
      feature: Feature,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Feature>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.featureIdPut(
        id,
        feature,
        options
      )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      )
    },
    /**
     *
     * @summary Creates a new feature.
     * @param {Feature} feature
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async featurePost(
      feature: Feature,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Feature>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.featurePost(
        feature,
        options
      )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      )
    },
  }
}

/**
 * FeatureApi - factory interface
 * @export
 */
export const FeatureApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = FeatureApiFp(configuration)
  return {
    /**
     *
     * @summary Returns a list of features (rapids, waterfalls, etc.).
     * @param {number} [offset] Number of items to skip before starting to return items
     * @param {number} [limit] Maximum number of items to return
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    featureGet(
      offset?: number,
      limit?: number,
      options?: any
    ): AxiosPromise<Array<Feature>> {
      return localVarFp
        .featureGet(offset, limit, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Deletes a feature by ID.
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    featureIdDelete(id: string, options?: any): AxiosPromise<Feature> {
      return localVarFp
        .featureIdDelete(id, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Returns a feature by ID.
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    featureIdGet(id: string, options?: any): AxiosPromise<Feature> {
      return localVarFp
        .featureIdGet(id, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Updates a feature by ID.
     * @param {string} id
     * @param {Feature} feature
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    featureIdPut(
      id: string,
      feature: Feature,
      options?: any
    ): AxiosPromise<Feature> {
      return localVarFp
        .featureIdPut(id, feature, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Creates a new feature.
     * @param {Feature} feature
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    featurePost(feature: Feature, options?: any): AxiosPromise<Feature> {
      return localVarFp
        .featurePost(feature, options)
        .then((request) => request(axios, basePath))
    },
  }
}

/**
 * FeatureApi - object-oriented interface
 * @export
 * @class FeatureApi
 * @extends {BaseAPI}
 */
export class FeatureApi extends BaseAPI {
  /**
   *
   * @summary Returns a list of features (rapids, waterfalls, etc.).
   * @param {number} [offset] Number of items to skip before starting to return items
   * @param {number} [limit] Maximum number of items to return
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof FeatureApi
   */
  public featureGet(
    offset?: number,
    limit?: number,
    options?: AxiosRequestConfig
  ) {
    return FeatureApiFp(this.configuration)
      .featureGet(offset, limit, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary Deletes a feature by ID.
   * @param {string} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof FeatureApi
   */
  public featureIdDelete(id: string, options?: AxiosRequestConfig) {
    return FeatureApiFp(this.configuration)
      .featureIdDelete(id, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary Returns a feature by ID.
   * @param {string} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof FeatureApi
   */
  public featureIdGet(id: string, options?: AxiosRequestConfig) {
    return FeatureApiFp(this.configuration)
      .featureIdGet(id, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary Updates a feature by ID.
   * @param {string} id
   * @param {Feature} feature
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof FeatureApi
   */
  public featureIdPut(
    id: string,
    feature: Feature,
    options?: AxiosRequestConfig
  ) {
    return FeatureApiFp(this.configuration)
      .featureIdPut(id, feature, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary Creates a new feature.
   * @param {Feature} feature
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof FeatureApi
   */
  public featurePost(feature: Feature, options?: AxiosRequestConfig) {
    return FeatureApiFp(this.configuration)
      .featurePost(feature, options)
      .then((request) => request(this.axios, this.basePath))
  }
}

/**
 * GageApi - axios parameter creator
 * @export
 */
export const GageApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @summary Returns a list of gages.
     * @param {number} [offset] Number of items to skip before starting to return items
     * @param {number} [limit] Maximum number of items to return
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    gageGet: async (
      offset?: number,
      limit?: number,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/gage`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication ApiKeyAuth required
      await setApiKeyToObject(
        localVarHeaderParameter,
        "X-WH2O-API-KEY",
        configuration
      )

      if (offset !== undefined) {
        localVarQueryParameter["offset"] = offset
      }

      if (limit !== undefined) {
        localVarQueryParameter["limit"] = limit
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Creates a new gage.
     * @param {Gage} gage
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    gagePost: async (
      gage: Gage,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'gage' is not null or undefined
      assertParamExists("gagePost", "gage", gage)
      const localVarPath = `/gage`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication ApiKeyAuth required
      await setApiKeyToObject(
        localVarHeaderParameter,
        "X-WH2O-API-KEY",
        configuration
      )

      localVarHeaderParameter["Content-Type"] = "application/json"

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        gage,
        localVarRequestOptions,
        configuration
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * GageApi - functional programming interface
 * @export
 */
export const GageApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = GageApiAxiosParamCreator(configuration)
  return {
    /**
     *
     * @summary Returns a list of gages.
     * @param {number} [offset] Number of items to skip before starting to return items
     * @param {number} [limit] Maximum number of items to return
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async gageGet(
      offset?: number,
      limit?: number,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Gage>>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.gageGet(
        offset,
        limit,
        options
      )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      )
    },
    /**
     *
     * @summary Creates a new gage.
     * @param {Gage} gage
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async gagePost(
      gage: Gage,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Gage>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.gagePost(
        gage,
        options
      )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      )
    },
  }
}

/**
 * GageApi - factory interface
 * @export
 */
export const GageApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = GageApiFp(configuration)
  return {
    /**
     *
     * @summary Returns a list of gages.
     * @param {number} [offset] Number of items to skip before starting to return items
     * @param {number} [limit] Maximum number of items to return
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    gageGet(
      offset?: number,
      limit?: number,
      options?: any
    ): AxiosPromise<Array<Gage>> {
      return localVarFp
        .gageGet(offset, limit, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Creates a new gage.
     * @param {Gage} gage
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    gagePost(gage: Gage, options?: any): AxiosPromise<Gage> {
      return localVarFp
        .gagePost(gage, options)
        .then((request) => request(axios, basePath))
    },
  }
}

/**
 * GageApi - object-oriented interface
 * @export
 * @class GageApi
 * @extends {BaseAPI}
 */
export class GageApi extends BaseAPI {
  /**
   *
   * @summary Returns a list of gages.
   * @param {number} [offset] Number of items to skip before starting to return items
   * @param {number} [limit] Maximum number of items to return
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GageApi
   */
  public gageGet(
    offset?: number,
    limit?: number,
    options?: AxiosRequestConfig
  ) {
    return GageApiFp(this.configuration)
      .gageGet(offset, limit, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary Creates a new gage.
   * @param {Gage} gage
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GageApi
   */
  public gagePost(gage: Gage, options?: AxiosRequestConfig) {
    return GageApiFp(this.configuration)
      .gagePost(gage, options)
      .then((request) => request(this.axios, this.basePath))
  }
}

/**
 * ReachApi - axios parameter creator
 * @export
 */
export const ReachApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @summary Returns a list of reaches (rivers, creeks, streams).
     * @param {number} [offset] Number of items to skip before starting to return items
     * @param {number} [limit] Maximum number of items to return
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    reachGet: async (
      offset?: number,
      limit?: number,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/reach`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication ApiKeyAuth required
      await setApiKeyToObject(
        localVarHeaderParameter,
        "X-WH2O-API-KEY",
        configuration
      )

      if (offset !== undefined) {
        localVarQueryParameter["offset"] = offset
      }

      if (limit !== undefined) {
        localVarQueryParameter["limit"] = limit
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Gets all the accidents for a reach by ID.
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    reachIdAccidentGet: async (
      id: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("reachIdAccidentGet", "id", id)
      const localVarPath = `/reach/{id}/accident`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id))
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication ApiKeyAuth required
      await setApiKeyToObject(
        localVarHeaderParameter,
        "X-WH2O-API-KEY",
        configuration
      )

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Gets all the articles for a reach by ID.
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    reachIdArticleGet: async (
      id: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("reachIdArticleGet", "id", id)
      const localVarPath = `/reach/{id}/article`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id))
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication ApiKeyAuth required
      await setApiKeyToObject(
        localVarHeaderParameter,
        "X-WH2O-API-KEY",
        configuration
      )

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Deletes a reach by ID.
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    reachIdDelete: async (
      id: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("reachIdDelete", "id", id)
      const localVarPath = `/reach/{id}`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id))
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication ApiKeyAuth required
      await setApiKeyToObject(
        localVarHeaderParameter,
        "X-WH2O-API-KEY",
        configuration
      )

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Gets all the events for a reach by ID.
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    reachIdEventGet: async (
      id: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("reachIdEventGet", "id", id)
      const localVarPath = `/reach/{id}/event`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id))
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication ApiKeyAuth required
      await setApiKeyToObject(
        localVarHeaderParameter,
        "X-WH2O-API-KEY",
        configuration
      )

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Gets all the features for a reach by ID.
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    reachIdFeatureGet: async (
      id: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("reachIdFeatureGet", "id", id)
      const localVarPath = `/reach/{id}/feature`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id))
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication ApiKeyAuth required
      await setApiKeyToObject(
        localVarHeaderParameter,
        "X-WH2O-API-KEY",
        configuration
      )

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Gets all the gages for a reach by ID.
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    reachIdGageGet: async (
      id: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("reachIdGageGet", "id", id)
      const localVarPath = `/reach/{id}/gage`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id))
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication ApiKeyAuth required
      await setApiKeyToObject(
        localVarHeaderParameter,
        "X-WH2O-API-KEY",
        configuration
      )

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Gets a reach by ID.
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    reachIdGet: async (
      id: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("reachIdGet", "id", id)
      const localVarPath = `/reach/{id}`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id))
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication ApiKeyAuth required
      await setApiKeyToObject(
        localVarHeaderParameter,
        "X-WH2O-API-KEY",
        configuration
      )

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Gets all the posts for a reach by ID.
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    reachIdPostGet: async (
      id: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("reachIdPostGet", "id", id)
      const localVarPath = `/reach/{id}/post`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id))
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication ApiKeyAuth required
      await setApiKeyToObject(
        localVarHeaderParameter,
        "X-WH2O-API-KEY",
        configuration
      )

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Updates a reach by ID.
     * @param {string} id
     * @param {Reach} reach
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    reachIdPut: async (
      id: string,
      reach: Reach,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("reachIdPut", "id", id)
      // verify required parameter 'reach' is not null or undefined
      assertParamExists("reachIdPut", "reach", reach)
      const localVarPath = `/reach/{id}`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id))
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication ApiKeyAuth required
      await setApiKeyToObject(
        localVarHeaderParameter,
        "X-WH2O-API-KEY",
        configuration
      )

      localVarHeaderParameter["Content-Type"] = "application/json"

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        reach,
        localVarRequestOptions,
        configuration
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Creates a new reach.
     * @param {Reach} reach
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    reachPost: async (
      reach: Reach,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'reach' is not null or undefined
      assertParamExists("reachPost", "reach", reach)
      const localVarPath = `/reach`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication ApiKeyAuth required
      await setApiKeyToObject(
        localVarHeaderParameter,
        "X-WH2O-API-KEY",
        configuration
      )

      localVarHeaderParameter["Content-Type"] = "application/json"

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        reach,
        localVarRequestOptions,
        configuration
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @summary Gets all the reaches for U.S. State.
     * @param {string} state
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    reachStateStateGet: async (
      state: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'state' is not null or undefined
      assertParamExists("reachStateStateGet", "state", state)
      const localVarPath = `/reach/state/{state}`.replace(
        `{${"state"}}`,
        encodeURIComponent(String(state))
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication ApiKeyAuth required
      await setApiKeyToObject(
        localVarHeaderParameter,
        "X-WH2O-API-KEY",
        configuration
      )

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * ReachApi - functional programming interface
 * @export
 */
export const ReachApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = ReachApiAxiosParamCreator(configuration)
  return {
    /**
     *
     * @summary Returns a list of reaches (rivers, creeks, streams).
     * @param {number} [offset] Number of items to skip before starting to return items
     * @param {number} [limit] Maximum number of items to return
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async reachGet(
      offset?: number,
      limit?: number,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Reach>>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.reachGet(
        offset,
        limit,
        options
      )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      )
    },
    /**
     *
     * @summary Gets all the accidents for a reach by ID.
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async reachIdAccidentGet(
      id: string,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Accident>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.reachIdAccidentGet(id, options)
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      )
    },
    /**
     *
     * @summary Gets all the articles for a reach by ID.
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async reachIdArticleGet(
      id: string,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Article>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.reachIdArticleGet(id, options)
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      )
    },
    /**
     *
     * @summary Deletes a reach by ID.
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async reachIdDelete(
      id: string,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.reachIdDelete(
        id,
        options
      )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      )
    },
    /**
     *
     * @summary Gets all the events for a reach by ID.
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async reachIdEventGet(
      id: string,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Event>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.reachIdEventGet(
        id,
        options
      )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      )
    },
    /**
     *
     * @summary Gets all the features for a reach by ID.
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async reachIdFeatureGet(
      id: string,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Feature>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.reachIdFeatureGet(id, options)
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      )
    },
    /**
     *
     * @summary Gets all the gages for a reach by ID.
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async reachIdGageGet(
      id: string,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Gage>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.reachIdGageGet(
        id,
        options
      )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      )
    },
    /**
     *
     * @summary Gets a reach by ID.
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async reachIdGet(
      id: string,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Reach>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.reachIdGet(
        id,
        options
      )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      )
    },
    /**
     *
     * @summary Gets all the posts for a reach by ID.
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async reachIdPostGet(
      id: string,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Post>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.reachIdPostGet(
        id,
        options
      )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      )
    },
    /**
     *
     * @summary Updates a reach by ID.
     * @param {string} id
     * @param {Reach} reach
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async reachIdPut(
      id: string,
      reach: Reach,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Reach>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.reachIdPut(
        id,
        reach,
        options
      )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      )
    },
    /**
     *
     * @summary Creates a new reach.
     * @param {Reach} reach
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async reachPost(
      reach: Reach,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Reach>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.reachPost(
        reach,
        options
      )
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      )
    },
    /**
     *
     * @summary Gets all the reaches for U.S. State.
     * @param {string} state
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async reachStateStateGet(
      state: string,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Reach>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.reachStateStateGet(state, options)
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      )
    },
  }
}

/**
 * ReachApi - factory interface
 * @export
 */
export const ReachApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = ReachApiFp(configuration)
  return {
    /**
     *
     * @summary Returns a list of reaches (rivers, creeks, streams).
     * @param {number} [offset] Number of items to skip before starting to return items
     * @param {number} [limit] Maximum number of items to return
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    reachGet(
      offset?: number,
      limit?: number,
      options?: any
    ): AxiosPromise<Array<Reach>> {
      return localVarFp
        .reachGet(offset, limit, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Gets all the accidents for a reach by ID.
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    reachIdAccidentGet(id: string, options?: any): AxiosPromise<Accident> {
      return localVarFp
        .reachIdAccidentGet(id, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Gets all the articles for a reach by ID.
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    reachIdArticleGet(id: string, options?: any): AxiosPromise<Article> {
      return localVarFp
        .reachIdArticleGet(id, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Deletes a reach by ID.
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    reachIdDelete(id: string, options?: any): AxiosPromise<void> {
      return localVarFp
        .reachIdDelete(id, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Gets all the events for a reach by ID.
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    reachIdEventGet(id: string, options?: any): AxiosPromise<Event> {
      return localVarFp
        .reachIdEventGet(id, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Gets all the features for a reach by ID.
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    reachIdFeatureGet(id: string, options?: any): AxiosPromise<Feature> {
      return localVarFp
        .reachIdFeatureGet(id, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Gets all the gages for a reach by ID.
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    reachIdGageGet(id: string, options?: any): AxiosPromise<Gage> {
      return localVarFp
        .reachIdGageGet(id, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Gets a reach by ID.
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    reachIdGet(id: string, options?: any): AxiosPromise<Reach> {
      return localVarFp
        .reachIdGet(id, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Gets all the posts for a reach by ID.
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    reachIdPostGet(id: string, options?: any): AxiosPromise<Post> {
      return localVarFp
        .reachIdPostGet(id, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Updates a reach by ID.
     * @param {string} id
     * @param {Reach} reach
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    reachIdPut(id: string, reach: Reach, options?: any): AxiosPromise<Reach> {
      return localVarFp
        .reachIdPut(id, reach, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Creates a new reach.
     * @param {Reach} reach
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    reachPost(reach: Reach, options?: any): AxiosPromise<Reach> {
      return localVarFp
        .reachPost(reach, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @summary Gets all the reaches for U.S. State.
     * @param {string} state
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    reachStateStateGet(state: string, options?: any): AxiosPromise<Reach> {
      return localVarFp
        .reachStateStateGet(state, options)
        .then((request) => request(axios, basePath))
    },
  }
}

/**
 * ReachApi - object-oriented interface
 * @export
 * @class ReachApi
 * @extends {BaseAPI}
 */
export class ReachApi extends BaseAPI {
  /**
   *
   * @summary Returns a list of reaches (rivers, creeks, streams).
   * @param {number} [offset] Number of items to skip before starting to return items
   * @param {number} [limit] Maximum number of items to return
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ReachApi
   */
  public reachGet(
    offset?: number,
    limit?: number,
    options?: AxiosRequestConfig
  ) {
    return ReachApiFp(this.configuration)
      .reachGet(offset, limit, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary Gets all the accidents for a reach by ID.
   * @param {string} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ReachApi
   */
  public reachIdAccidentGet(id: string, options?: AxiosRequestConfig) {
    return ReachApiFp(this.configuration)
      .reachIdAccidentGet(id, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary Gets all the articles for a reach by ID.
   * @param {string} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ReachApi
   */
  public reachIdArticleGet(id: string, options?: AxiosRequestConfig) {
    return ReachApiFp(this.configuration)
      .reachIdArticleGet(id, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary Deletes a reach by ID.
   * @param {string} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ReachApi
   */
  public reachIdDelete(id: string, options?: AxiosRequestConfig) {
    return ReachApiFp(this.configuration)
      .reachIdDelete(id, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary Gets all the events for a reach by ID.
   * @param {string} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ReachApi
   */
  public reachIdEventGet(id: string, options?: AxiosRequestConfig) {
    return ReachApiFp(this.configuration)
      .reachIdEventGet(id, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary Gets all the features for a reach by ID.
   * @param {string} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ReachApi
   */
  public reachIdFeatureGet(id: string, options?: AxiosRequestConfig) {
    return ReachApiFp(this.configuration)
      .reachIdFeatureGet(id, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary Gets all the gages for a reach by ID.
   * @param {string} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ReachApi
   */
  public reachIdGageGet(id: string, options?: AxiosRequestConfig) {
    return ReachApiFp(this.configuration)
      .reachIdGageGet(id, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary Gets a reach by ID.
   * @param {string} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ReachApi
   */
  public reachIdGet(id: string, options?: AxiosRequestConfig) {
    return ReachApiFp(this.configuration)
      .reachIdGet(id, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary Gets all the posts for a reach by ID.
   * @param {string} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ReachApi
   */
  public reachIdPostGet(id: string, options?: AxiosRequestConfig) {
    return ReachApiFp(this.configuration)
      .reachIdPostGet(id, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary Updates a reach by ID.
   * @param {string} id
   * @param {Reach} reach
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ReachApi
   */
  public reachIdPut(id: string, reach: Reach, options?: AxiosRequestConfig) {
    return ReachApiFp(this.configuration)
      .reachIdPut(id, reach, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary Creates a new reach.
   * @param {Reach} reach
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ReachApi
   */
  public reachPost(reach: Reach, options?: AxiosRequestConfig) {
    return ReachApiFp(this.configuration)
      .reachPost(reach, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @summary Gets all the reaches for U.S. State.
   * @param {string} state
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ReachApi
   */
  public reachStateStateGet(state: string, options?: AxiosRequestConfig) {
    return ReachApiFp(this.configuration)
      .reachStateStateGet(state, options)
      .then((request) => request(this.axios, this.basePath))
  }
}
