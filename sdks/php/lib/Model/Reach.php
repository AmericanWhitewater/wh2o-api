<?php
/**
 * Reach
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * wh2o-api
 *
 * The API for American Whitewater.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * Reach Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Reach implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Reach';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'river' => 'string',
        'section' => 'string',
        'alternate_name' => 'string',
        'abstract' => 'string',
        'average_gradient' => 'float',
        'maximum_gradient' => 'float',
        'minimum_gradient' => 'float',
        'county' => 'string',
        'description' => 'string',
        'grade' => 'string',
        'state' => 'string',
        'zipcode' => 'string',
        'length' => 'float',
        'events' => '\OpenAPI\Client\Model\Event[]',
        'features' => '\OpenAPI\Client\Model\Feature[]',
        'gages' => '\OpenAPI\Client\Model\Gage[]',
        'posts' => '\OpenAPI\Client\Model\Post[]',
        'permit' => '\OpenAPI\Client\Model\Permit'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'river' => null,
        'section' => null,
        'alternate_name' => null,
        'abstract' => null,
        'average_gradient' => null,
        'maximum_gradient' => null,
        'minimum_gradient' => null,
        'county' => null,
        'description' => null,
        'grade' => null,
        'state' => null,
        'zipcode' => null,
        'length' => null,
        'events' => null,
        'features' => null,
        'gages' => null,
        'posts' => null,
        'permit' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
		'river' => false,
		'section' => false,
		'alternate_name' => false,
		'abstract' => false,
		'average_gradient' => false,
		'maximum_gradient' => false,
		'minimum_gradient' => false,
		'county' => false,
		'description' => false,
		'grade' => false,
		'state' => false,
		'zipcode' => false,
		'length' => false,
		'events' => false,
		'features' => false,
		'gages' => false,
		'posts' => false,
		'permit' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'river' => 'river',
        'section' => 'section',
        'alternate_name' => 'alternate_name',
        'abstract' => 'abstract',
        'average_gradient' => 'average_gradient',
        'maximum_gradient' => 'maximum_gradient',
        'minimum_gradient' => 'minimum_gradient',
        'county' => 'county',
        'description' => 'description',
        'grade' => 'grade',
        'state' => 'state',
        'zipcode' => 'zipcode',
        'length' => 'length',
        'events' => 'events',
        'features' => 'features',
        'gages' => 'gages',
        'posts' => 'posts',
        'permit' => 'permit'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'river' => 'setRiver',
        'section' => 'setSection',
        'alternate_name' => 'setAlternateName',
        'abstract' => 'setAbstract',
        'average_gradient' => 'setAverageGradient',
        'maximum_gradient' => 'setMaximumGradient',
        'minimum_gradient' => 'setMinimumGradient',
        'county' => 'setCounty',
        'description' => 'setDescription',
        'grade' => 'setGrade',
        'state' => 'setState',
        'zipcode' => 'setZipcode',
        'length' => 'setLength',
        'events' => 'setEvents',
        'features' => 'setFeatures',
        'gages' => 'setGages',
        'posts' => 'setPosts',
        'permit' => 'setPermit'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'river' => 'getRiver',
        'section' => 'getSection',
        'alternate_name' => 'getAlternateName',
        'abstract' => 'getAbstract',
        'average_gradient' => 'getAverageGradient',
        'maximum_gradient' => 'getMaximumGradient',
        'minimum_gradient' => 'getMinimumGradient',
        'county' => 'getCounty',
        'description' => 'getDescription',
        'grade' => 'getGrade',
        'state' => 'getState',
        'zipcode' => 'getZipcode',
        'length' => 'getLength',
        'events' => 'getEvents',
        'features' => 'getFeatures',
        'gages' => 'getGages',
        'posts' => 'getPosts',
        'permit' => 'getPermit'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('river', $data ?? [], null);
        $this->setIfExists('section', $data ?? [], null);
        $this->setIfExists('alternate_name', $data ?? [], null);
        $this->setIfExists('abstract', $data ?? [], null);
        $this->setIfExists('average_gradient', $data ?? [], null);
        $this->setIfExists('maximum_gradient', $data ?? [], null);
        $this->setIfExists('minimum_gradient', $data ?? [], null);
        $this->setIfExists('county', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('grade', $data ?? [], null);
        $this->setIfExists('state', $data ?? [], null);
        $this->setIfExists('zipcode', $data ?? [], null);
        $this->setIfExists('length', $data ?? [], null);
        $this->setIfExists('events', $data ?? [], null);
        $this->setIfExists('features', $data ?? [], null);
        $this->setIfExists('gages', $data ?? [], null);
        $this->setIfExists('posts', $data ?? [], null);
        $this->setIfExists('permit', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['river'] === null) {
            $invalidProperties[] = "'river' can't be null";
        }
        if ($this->container['section'] === null) {
            $invalidProperties[] = "'section' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id The auto-generated id of the reach
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets river
     *
     * @return string
     */
    public function getRiver()
    {
        return $this->container['river'];
    }

    /**
     * Sets river
     *
     * @param string $river The name of the reach
     *
     * @return self
     */
    public function setRiver($river)
    {
        if (is_null($river)) {
            throw new \InvalidArgumentException('non-nullable river cannot be null');
        }
        $this->container['river'] = $river;

        return $this;
    }

    /**
     * Gets section
     *
     * @return string
     */
    public function getSection()
    {
        return $this->container['section'];
    }

    /**
     * Sets section
     *
     * @param string $section The section of the reach
     *
     * @return self
     */
    public function setSection($section)
    {
        if (is_null($section)) {
            throw new \InvalidArgumentException('non-nullable section cannot be null');
        }
        $this->container['section'] = $section;

        return $this;
    }

    /**
     * Gets alternate_name
     *
     * @return string|null
     */
    public function getAlternateName()
    {
        return $this->container['alternate_name'];
    }

    /**
     * Sets alternate_name
     *
     * @param string|null $alternate_name alternate_name
     *
     * @return self
     */
    public function setAlternateName($alternate_name)
    {
        if (is_null($alternate_name)) {
            throw new \InvalidArgumentException('non-nullable alternate_name cannot be null');
        }
        $this->container['alternate_name'] = $alternate_name;

        return $this;
    }

    /**
     * Gets abstract
     *
     * @return string|null
     */
    public function getAbstract()
    {
        return $this->container['abstract'];
    }

    /**
     * Sets abstract
     *
     * @param string|null $abstract abstract
     *
     * @return self
     */
    public function setAbstract($abstract)
    {
        if (is_null($abstract)) {
            throw new \InvalidArgumentException('non-nullable abstract cannot be null');
        }
        $this->container['abstract'] = $abstract;

        return $this;
    }

    /**
     * Gets average_gradient
     *
     * @return float|null
     */
    public function getAverageGradient()
    {
        return $this->container['average_gradient'];
    }

    /**
     * Sets average_gradient
     *
     * @param float|null $average_gradient average_gradient
     *
     * @return self
     */
    public function setAverageGradient($average_gradient)
    {
        if (is_null($average_gradient)) {
            throw new \InvalidArgumentException('non-nullable average_gradient cannot be null');
        }
        $this->container['average_gradient'] = $average_gradient;

        return $this;
    }

    /**
     * Gets maximum_gradient
     *
     * @return float|null
     */
    public function getMaximumGradient()
    {
        return $this->container['maximum_gradient'];
    }

    /**
     * Sets maximum_gradient
     *
     * @param float|null $maximum_gradient maximum_gradient
     *
     * @return self
     */
    public function setMaximumGradient($maximum_gradient)
    {
        if (is_null($maximum_gradient)) {
            throw new \InvalidArgumentException('non-nullable maximum_gradient cannot be null');
        }
        $this->container['maximum_gradient'] = $maximum_gradient;

        return $this;
    }

    /**
     * Gets minimum_gradient
     *
     * @return float|null
     */
    public function getMinimumGradient()
    {
        return $this->container['minimum_gradient'];
    }

    /**
     * Sets minimum_gradient
     *
     * @param float|null $minimum_gradient minimum_gradient
     *
     * @return self
     */
    public function setMinimumGradient($minimum_gradient)
    {
        if (is_null($minimum_gradient)) {
            throw new \InvalidArgumentException('non-nullable minimum_gradient cannot be null');
        }
        $this->container['minimum_gradient'] = $minimum_gradient;

        return $this;
    }

    /**
     * Gets county
     *
     * @return string|null
     */
    public function getCounty()
    {
        return $this->container['county'];
    }

    /**
     * Sets county
     *
     * @param string|null $county county
     *
     * @return self
     */
    public function setCounty($county)
    {
        if (is_null($county)) {
            throw new \InvalidArgumentException('non-nullable county cannot be null');
        }
        $this->container['county'] = $county;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description description
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            throw new \InvalidArgumentException('non-nullable description cannot be null');
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets grade
     *
     * @return string|null
     */
    public function getGrade()
    {
        return $this->container['grade'];
    }

    /**
     * Sets grade
     *
     * @param string|null $grade grade
     *
     * @return self
     */
    public function setGrade($grade)
    {
        if (is_null($grade)) {
            throw new \InvalidArgumentException('non-nullable grade cannot be null');
        }
        $this->container['grade'] = $grade;

        return $this;
    }

    /**
     * Gets state
     *
     * @return string|null
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param string|null $state state
     *
     * @return self
     */
    public function setState($state)
    {
        if (is_null($state)) {
            throw new \InvalidArgumentException('non-nullable state cannot be null');
        }
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets zipcode
     *
     * @return string|null
     */
    public function getZipcode()
    {
        return $this->container['zipcode'];
    }

    /**
     * Sets zipcode
     *
     * @param string|null $zipcode zipcode
     *
     * @return self
     */
    public function setZipcode($zipcode)
    {
        if (is_null($zipcode)) {
            throw new \InvalidArgumentException('non-nullable zipcode cannot be null');
        }
        $this->container['zipcode'] = $zipcode;

        return $this;
    }

    /**
     * Gets length
     *
     * @return float|null
     */
    public function getLength()
    {
        return $this->container['length'];
    }

    /**
     * Sets length
     *
     * @param float|null $length length
     *
     * @return self
     */
    public function setLength($length)
    {
        if (is_null($length)) {
            throw new \InvalidArgumentException('non-nullable length cannot be null');
        }
        $this->container['length'] = $length;

        return $this;
    }

    /**
     * Gets events
     *
     * @return \OpenAPI\Client\Model\Event[]|null
     */
    public function getEvents()
    {
        return $this->container['events'];
    }

    /**
     * Sets events
     *
     * @param \OpenAPI\Client\Model\Event[]|null $events events
     *
     * @return self
     */
    public function setEvents($events)
    {
        if (is_null($events)) {
            throw new \InvalidArgumentException('non-nullable events cannot be null');
        }
        $this->container['events'] = $events;

        return $this;
    }

    /**
     * Gets features
     *
     * @return \OpenAPI\Client\Model\Feature[]|null
     */
    public function getFeatures()
    {
        return $this->container['features'];
    }

    /**
     * Sets features
     *
     * @param \OpenAPI\Client\Model\Feature[]|null $features features
     *
     * @return self
     */
    public function setFeatures($features)
    {
        if (is_null($features)) {
            throw new \InvalidArgumentException('non-nullable features cannot be null');
        }
        $this->container['features'] = $features;

        return $this;
    }

    /**
     * Gets gages
     *
     * @return \OpenAPI\Client\Model\Gage[]|null
     */
    public function getGages()
    {
        return $this->container['gages'];
    }

    /**
     * Sets gages
     *
     * @param \OpenAPI\Client\Model\Gage[]|null $gages gages
     *
     * @return self
     */
    public function setGages($gages)
    {
        if (is_null($gages)) {
            throw new \InvalidArgumentException('non-nullable gages cannot be null');
        }
        $this->container['gages'] = $gages;

        return $this;
    }

    /**
     * Gets posts
     *
     * @return \OpenAPI\Client\Model\Post[]|null
     */
    public function getPosts()
    {
        return $this->container['posts'];
    }

    /**
     * Sets posts
     *
     * @param \OpenAPI\Client\Model\Post[]|null $posts posts
     *
     * @return self
     */
    public function setPosts($posts)
    {
        if (is_null($posts)) {
            throw new \InvalidArgumentException('non-nullable posts cannot be null');
        }
        $this->container['posts'] = $posts;

        return $this;
    }

    /**
     * Gets permit
     *
     * @return \OpenAPI\Client\Model\Permit|null
     */
    public function getPermit()
    {
        return $this->container['permit'];
    }

    /**
     * Sets permit
     *
     * @param \OpenAPI\Client\Model\Permit|null $permit permit
     *
     * @return self
     */
    public function setPermit($permit)
    {
        if (is_null($permit)) {
            throw new \InvalidArgumentException('non-nullable permit cannot be null');
        }
        $this->container['permit'] = $permit;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


